# Prototype
snippet reactComponent
	import React, { Component, PropTypes } from 'react';

	class ${1:component_name} extends Component{
		constructor(args){
			super(args)
			this.state = {
				mounted : false
			}
		}
		componentDidMount(){
		}
		componentWillUnmont(){
		}
		componentWillReceiveProps(nextProps){
		}
		render(){
			return(
				<div id="${1:component_name}">
					${2}
				</div>
			)
		}
	}
	${1:component_name}.propTypes = {
		//start : React.PropTypes.bool
	}
	${1:component_name}.defaultProps ={
	  //start : false
	}
	export default ${1:component_name};
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
#forEach
snippet .forEach
	.forEach(function(${1:value},${2:key/index}){
		${3:// body...}
	});
#map
snippet .map
	.map(function(${1:value},${2:key/index}){
		${3:// body...}
	});
#reduce
snippet .reduce
	.reduce(function(${1:previousVal},${2:curVal},${3:curIndex},${4:array}){
		${5:return previousVal + curVal;}
	});
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${2:case}':
			${3:// code}
			break;
		default:
			${4:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${1:i} = 0; $1 < ${2}; $1${3:++}) {
		${4}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
snippet forin
	for (var ${1:i} in ${2:object}) {
		${3}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gets
	getElementBy${1:Id}('${2}')${3}
# Console log
snippet log'
	console.log('${1}');
snippet log
	console.log(${1});

#DOM finds
snippet domgetid
	document.getElementById(${1})
snippet domgettag
	document.getElementsByTagName(${1})
snippet domgetclass
	document.getElementsByClassName(${1})
snippet domcreatele
	document.createElement(${1})
snippet domremovechild
	document.removeChild(${1})
snippet domappendchild
	document.appendChild(${1})
snippet domreplacechild
	document.replaceChild(${1})
snippet domwrite
	document.write(${1})

snippet $
	$('${1}').${2}(function(${3}){
		${4}
	});

